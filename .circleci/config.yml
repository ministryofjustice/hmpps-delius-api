version: 2.1

orbs:
  owasp: entur/owasp@0.0.10
  hmpps: ministryofjustice/hmpps@3.1
  mem: circleci/rememborb@0.0.1
  aws-ecs: circleci/aws-ecs@2.2.0
  aws-cli: circleci/aws-cli@2.0.0
  queue: eddiewebb/queue@1.5.0
  sast-orb: orb-01scan/sast-orb@0.0.8
  slack: circleci/slack@4.1.3

commands:
  assume_role:
    description: |
      Assume an IAM role in AWS.
      This is a workaround for the aws-ecs/update-service CircleCI command not taking a profile parameter, and the underlying aws cli command not honouring the AWS_PROFILE env var.
      See https://github.com/CircleCI-Public/aws-ecs-orb/issues/41 for further details
    parameters:
      role-arn:
        type: string
    steps:
      - run:
          name: Assume IAM role
          command: |
            temp_role=$(aws sts assume-role --role-arn "<< parameters.role-arn >>" --role-session-name "circleci-$CIRCLE_BUILD_NUM-$RANDOM")
            echo "export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)" >> $BASH_ENV; source $BASH_ENV;
            echo "export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)" >> $BASH_ENV; source $BASH_ENV;
            echo "export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)" >> $BASH_ENV; source $BASH_ENV;
            aws configure set aws_session_token "$(echo $temp_role | jq .Credentials.SessionToken | xargs)" --profile default

jobs:
  build-gradle:
    docker:
      - image: cimg/openjdk:11.0
    environment:
      JAVA_TOOL_OPTIONS: -Xmx3g -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          name: Gradle build # TODO get the e2e tests running against local-oracle here
          command: ./gradlew build e2eClasses
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - persist_to_workspace:
          root: build/libs
          paths:
            - hmpps-delius-api-*.jar
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
  build-docker:
    docker:
       - image: circleci/python
    steps:
      - checkout
      - hmpps/create_app_version
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup
      - assume_role:
          role-arn: $AWS_ROLE_ARN
      # Currently the aws-ecr orb does not support logging in/ pushing to public repos
      - run:
          name: Docker Image
          command: |
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/hmpps
            docker build --tag public.ecr.aws/hmpps/delius-api:$APP_VERSION \
              --label "app.version=${APP_VERSION}" \
              --label "build.version=${APP_VERSION}" \
              --label "build.number=${CIRCLE_BUILD_NUM}" \
              --label "build.url=${CIRCLE_BUILD_URL}" \
              --label "build.gitref=${CIRCLE_SHA1}" .
            docker push public.ecr.aws/hmpps/delius-api:$APP_VERSION
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Tag latest
                command: |
                  docker tag "public.ecr.aws/hmpps/delius-api:$APP_VERSION" "public.ecr.aws/hmpps/delius-api:latest"
                  docker push public.ecr.aws/hmpps/delius-api:latest
  sast-scan:
    executor: sast-orb/default
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Rename artifact
          command: mv /tmp/hmpps-delius-api-*.jar /tmp/hmpps-delius-api.jar
      - sast-orb/policy-scan:
          filepath: /tmp/hmpps-delius-api.jar
          teams: delius-api
  deploy:
    docker:
      - image: circleci/python
    steps:
      - mem/recall:
          env_var: APP_VERSION
      - queue/until_front_of_line:
          consider-branch: false
          time: '10'
      - aws-cli/setup
      - assume_role:
          role-arn: $AWS_ROLE_ARN
      - aws-ecs/update-service:
          cluster-name: $AWS_ECS_CLUSTER_NAME
          family: $AWS_ECS_ENV_NAME-delius-api-task-definition
          service-name: $AWS_ECS_ENV_NAME-delius-api-service
          container-image-name-updates: container=delius-api,tag=$APP_VERSION
          verify-revision-is-deployed: true
      - slack/notify:
          event: always
          channel: delius-api-notifications
          custom: |
            {
              "blocks": [
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": ":circleci-${CCI_STATUS}: CircleCI deploy ${CCI_STATUS}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${CIRCLE_PROJECT_REPONAME}* version `${APP_VERSION}` deploy to *${AWS_ECS_ENV_NAME}*"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                }
              ]
            }

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build-docker:
          context: hmpps-delius-push-to-ecr
      - build-gradle:
          filters:
            tags:
              ignore: /.*/
      - sast-scan:
          context: hmpps-common-vars
          requires:
            - build-gradle
      - deploy:
          name: deploy-to-dev
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-dev
          requires:
            - build-gradle
            - build-docker
      - deploy:
          name: deploy-to-test
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-test
          filters:
            branches:
              only:
                - main
          requires:
            - deploy-to-dev
      - request-pre-prod-approval:
          type: approval
          requires:
            - deploy-to-test
      - deploy:
          name: deploy-to-stage
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-stage
          requires:
            - request-pre-prod-approval
      - deploy:
          name: deploy-to-pre-prod
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-pre-prod
          requires:
            - request-pre-prod-approval
      - deploy:
          name: deploy-to-perf
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-perf
          requires:
            - request-pre-prod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy-to-stage
            - deploy-to-pre-prod
            - deploy-to-perf
      - deploy:
          name: deploy-to-prod
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-prod
          requires:
            - request-prod-approval

  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - owasp/gradle_owasp_dependency_check:
          executor: hmpps/java
