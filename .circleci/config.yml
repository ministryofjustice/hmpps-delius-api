version: 2.1

orbs:
  owasp: entur/owasp@0.0.10
  hmpps: ministryofjustice/hmpps@2.2
  aws-ecs: circleci/aws-ecs@0.0.10
  aws-cli: circleci/aws-cli@1.3.2
commands:
  configure_profile:
    parameters:
      profile-name:
        type: string
      role-arn:
        type: string
    steps:
      - run:
          name: Configure credentials profile
          command: |
            aws configure set role_arn "<<parameters.role-arn>>" --profile <<parameters.profile-name>>
            aws configure set source_profile default --profile <<parameters.profile-name>>
  # This is a workaround for the aws-ecs/update-service CircleCI command not taking a profile parameter, and the underlying aws cli command not honouring the AWS_PROFILE env var.
  # See https://github.com/CircleCI-Public/aws-ecs-orb/issues/41 for further details
  assume_role:
    parameters:
      role-arn:
        type: string
    steps:
      - run:
          name: Assume IAM role
          command: |
            temp_role=$(aws sts assume-role --role-arn <<parameters.role-arn>> --role-session-name "role_session")
            echo "export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)" >> $BASH_ENV; source $BASH_ENV;
            echo "export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)" >> $BASH_ENV; source $BASH_ENV;
            echo "export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)" >> $BASH_ENV; source $BASH_ENV;
  deploy_to_env:
    parameters:
      role-arn:
        type: string
      family:
        type: string
      cluster-name:
        type: string
      service-name:
        type: string
      container-image-name-updates:
        type: string
    steps:
      - aws-cli/setup
      - assume_role:
          role-arn: <<parameters.role-arn>>
      - aws-ecs/update-service:
          family: <<parameters.family>>
          cluster-name: <<parameters.cluster-name>>
          service-name: <<parameters.service-name>>
          container-image-name-updates: <<parameters.container-image-name-updates>>
          verify-revision-is-deployed: true
jobs:
  validate:
    executor: hmpps/java
    environment:
      _JAVA_OPTIONS: -Xmx1024m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew check
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
  build_docker:
    docker:
       - image: circleci/python
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          profile-name: default
      - configure_profile:
          profile-name: engineering_dev
          role-arn: $ROLE_ARN_PUSH_DOCKER_IMAGE
      # Currently the aws-ecr orb does not support logging in/ pushing to public repos
      - run:
          name: Docker Image
          command: |
            aws ecr-public get-login-password --region us-east-1 --profile engineering_dev| docker login --username AWS --password-stdin $AWS_ECS_ACCOUNT_URL
            docker build -t $AWS_ECS_ACCOUNT_URL/delius-api:$CIRCLE_SHA1 .
            docker push $AWS_ECS_ACCOUNT_URL/delius-api:$CIRCLE_SHA1
  deploy-dev:
    docker:
      - image: circleci/python
    steps:
      - deploy_to_env:
          role-arn: $ROLE_ARN_DEPLOY_DEV
          family: dlc-dev-delius-api-task-definition
          cluster-name: dlc-dlc-dev-ecscluster-private-ecs
          service-name: dlc-dev-delius-api-service
          container-image-name-updates: container=delius-api,tag=${CIRCLE_SHA1}

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - build_docker:
          filters:
            branches:
              only:
                - main
      - deploy-dev:
          filters:
            branches:
              only:
                - main
          requires:
          - validate
          - build_docker

  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - owasp/gradle_owasp_dependency_check:
          executor: hmpps/java
